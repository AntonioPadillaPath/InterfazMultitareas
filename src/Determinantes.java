
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Antonio
 */
public class Determinantes extends javax.swing.JFrame {

    /**
     * Creates new form Determinantes
     */
    public Determinantes() {
        super("Determinantes");
        initComponents();
        
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        SIZE = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Matriz = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        D = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        Determinante = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(21, 51, 79));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 8));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Ingrese el tama√±o de la matriz: ");

        SIZE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SIZEKeyTyped(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jButton1.setText("?");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Matriz.setEditable(false);
        Matriz.setColumns(20);
        Matriz.setRows(5);
        jScrollPane1.setViewportView(Matriz);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Matriz:");

        D.setText("Ingresar valores y calcular Determinante");
        D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Determinante:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Determinante, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(31, 31, 31)
                        .addComponent(SIZE, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(jLabel2)
                        .addComponent(D, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(SIZE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(D)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addComponent(Determinante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SIZEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SIZEKeyTyped
        
        char SIZE = evt.getKeyChar();
        
        if(Character.isLetter(SIZE))
        {
            getToolkit().beep();
            evt.consume();
            D.setEnabled(false);
        }
        
        else
        {
            D.setEnabled(true);
        }
        
    }//GEN-LAST:event_SIZEKeyTyped

    private void DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DActionPerformed
        
        try{
        
        int i, j, k, l, m;
        double pivote1, pivote2, pivote3;
        int n;
        double determinante = 1;
        int multiplicacionVector;
        
        n = Integer.parseInt(this.SIZE.getText());
        
        Matriz.setText("");
        Determinante.setText("");
        
        double matriz[][] = new double [n][n];
        String matriz1[][] = new String [n][n];
        double diagonal[] = new double [n];
        double vectorCambio[] = new double [n];
        int vector[] = new int [30];
        
        JOptionPane.showMessageDialog(null, "Ingrese los valores en las entradas correspondientes", "Determinante de una matriz", JOptionPane.PLAIN_MESSAGE);
        
        for(i = 0; i < n; i++)
        {
            for(j = 0; j < n; j++)
            {
                matriz1[i][j] = JOptionPane.showInputDialog(null, "Entrada " +i+ +j, "Determinante de una matriz", JOptionPane.QUESTION_MESSAGE);
            
                if(matriz1[i][j].indexOf('.') != -1)
                {
                    matriz[i][j] = Double.parseDouble(matriz1[i][j]);
                    
                }
            
                else if(matriz1[i][j].indexOf('/') != -1)
                {
                    String arreglo1[]= matriz1[i][j].split("/");
                    double fraccionA = Double.parseDouble(arreglo1[0]);
                    double fraccionB = Double.parseDouble(arreglo1[1]);
                    matriz[i][j] = fraccionA / fraccionB;
                    
                    
                }
            
                else
                {
                    matriz[i][j] = Double.parseDouble(matriz1[i][j]);                
                }
            }
        }
        
        
        JOptionPane.showMessageDialog(null, "Los valores de la Matriz se muestran en el campo de texto", "Determinante de una matriz", JOptionPane.INFORMATION_MESSAGE);
        
        for(i = 0; i < n; i++)
        {
            for(j = 0; j < n; j++)
            {
                Matriz.append(String.valueOf("[" +matriz[i][j]+ "]"));
            }
            Matriz.append("\n");
        }
        
        Matriz.append("\n");
        Matriz.append("Comienza el procedimiento:\n");
        
        //Procedimiento
        for(i = 0; i < (n - 1); i++)
            {
                
                /**/
                for(k = 0; k < (vector.length); k++)
                {
                    vector[k] = 1; 
                }
                    
                while(matriz[i][i] == 0)
                {
                    for(k = 0; k < n; k++)
                    {
                        vectorCambio[k] = matriz[i][k];
                        matriz[i][k] = matriz[i + 1][k];
                        matriz[i + 1][k] = vectorCambio[k];
                        vector[i] = -1;
                    }
                }
                
                multiplicacionVector = 1;
        
                for(k = 0; k < (vector.length - 1); k++)
                {
                    multiplicacionVector *= vector[i]; 
                }
                
                    pivote3 = matriz[i][i];
                    diagonal[i] = pivote3 * multiplicacionVector;
                        
                    
                        //Divisi√≥n para que la columna quede en 1
                        for(k = 0; k < n;k++)
                        {                       
                            matriz[i][k] = matriz[i][k] / pivote3;                          
                        }
                
                        for(l = 0; l < n; l++)
                        {
                            //for para imprimir por pasos la matriz
                            for(m = 0; m < n; m++)
                            {
                                if(m == n)
                                {
                                    Matriz.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                }
                
                                else
                                {
                                    Matriz.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                }
                            }
                            Matriz.append("\n");
                        }
        
                        Matriz.append("\n");
                        Matriz.append("\n");
                     /**/
                
                for(j = n; j > (i + 1); j--)
                {
                    
                /*    if(i > 0)
                    {
                        pivote3 = matriz[i][i];
                        
                    
                        //Divisi√≥n para que la columna quede en 1
                        for(k = 0; k < n;k++)
                        {                       
                            matriz[i][k] = matriz[i][k] / pivote3;                          
                        }
                
                        for(l = 0; l < n; l++)
                        {
                            //for para imprimir por pasos la matriz
                            for(m = 0; m < n; m++)
                            {
                                if(m == n)
                                {
                                    Matriz.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                }
                
                                else
                                {
                                    Matriz.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                }
                            }
                            Matriz.append("\n");
                        }
        
                        Matriz.append("\n");
                        Matriz.append("\n");
                    } */
                    
                    
                    
                    pivote1 = matriz[i][i];
                    pivote2 = matriz[j - 1][i];
                    
                    if((matriz[j - 1][i] > 0 && matriz[i][i] > 0) || ((matriz[j - 1][i] < 0 && matriz[i][i] < 0)))
                    {
                        for(k = 0; k < n;k++)
                        {                       
                            matriz[j - 1][k] = (matriz[j - 1][k] * pivote1) + (matriz[i][k]) * ((-1) * pivote2);                          
                        }
                        
                        for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < n; m++)
                                {
                                    if(m == n)
                                    {
                                        Matriz.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Matriz.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Matriz.append("\n");
                            }
        
                            Matriz.append("\n");
                            Matriz.append("\n");
                        
                    }
                    
                    else if((matriz[j - 1][i] > 0 && matriz[i][i] < 0) || ((matriz[j - 1][i] < 0 && matriz[i][i] > 0)) || matriz[i][i] == 0)
                        {
                        
                            for(k = 0; k < n;k++)
                        {                       
                            matriz[j - 1][k] = (matriz[j - 1][k] * pivote1) - (matriz[i][k] * pivote2);                          
                        }
                        
                        for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < n; m++)
                                {
                                    if(m == n)
                                    {
                                        Matriz.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Matriz.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Matriz.append("\n");
                            }
        
                            Matriz.append("\n");
                            Matriz.append("\n");
                    }
                    
                    else
                    {
                        for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < n; m++)
                                {
                                    if(m == n)
                                    {
                                        Matriz.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Matriz.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Matriz.append("\n");
                            }
        
                            Matriz.append("\n");
                            Matriz.append("\n");
                    }
                    
             
                    
           
                }

                
                /*
                    
                        pivote3 = matriz[i][i];
                        diagonal[i] = pivote3;
                        
                    
                        //Divisi√≥n para que la columna quede en 1
                        for(k = 0; k < n;k++)
                        {                       
                            matriz[i][k] = matriz[i][k] / pivote3;                          
                        }
                
                        for(l = 0; l < n; l++)
                        {
                            //for para imprimir por pasos la matriz
                            for(m = 0; m < n; m++)
                            {
                                if(m == n)
                                {
                                    Matriz.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                }
                
                                else
                                {
                                    Matriz.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                }
                            }
                            Matriz.append("\n");
                        }
        
                        Matriz.append("\n");
                        Matriz.append("\n");
                     */
                
            }
            
            pivote3 = matriz[n - 1][n - 1];
            diagonal[n - 1] = pivote3;
            
            /*for(i = (n - 1); i <= (n - 1); i++)
            {
                for(j = 0; j < n; j++)
                {
                    matriz[i][j] = matriz[i][j] / pivote3;
                }
            }*/
            
            for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < n; m++)
                                {
                                    if(m == n)
                                    {
                                        Matriz.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Matriz.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Matriz.append("\n");
                            }
        
                            Matriz.append("\n");
                            Matriz.append("\n");
        
    
                            Matriz.append("Valores de la diagonal principal\n");
                            Matriz.append("los cuales se multiplicar√°n para\n");
                            Matriz.append("para obtener la determinante:\n");
                            Matriz.append("\n");
                            
        for(i = 0; i < n; i++)
        {
            Matriz.append(String.valueOf(diagonal[i]));
            Matriz.append("\n");
            
        }
        
        
        
        for(i = 0; i < n; i++)
        {
            determinante *= diagonal[i];
        }

        
        
        //determinante *= multiplicacionVector;
        
        JOptionPane.showMessageDialog(null, "El valor de la determinante se muestra en el campo correspondiente", "Determinante de una matriz", JOptionPane.INFORMATION_MESSAGE);
        
        if(determinante == 0)
        {
            Determinante.setText("No hay soluci√≥n");
        }
        else
        {
           Determinante.setText(String.valueOf(determinante)); 
        }
        
        
        } catch(Exception e){JOptionPane.showMessageDialog(null, "Ingrese s√≥lo los valores solicitados", "Determinantes", JOptionPane.ERROR_MESSAGE);}
        
    }//GEN-LAST:event_DActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        AyudaDet det = new AyudaDet();
        det.setVisible(true);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Determinantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Determinantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Determinantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Determinantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Determinantes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton D;
    private javax.swing.JTextField Determinante;
    private javax.swing.JTextArea Matriz;
    private javax.swing.JTextField SIZE;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
