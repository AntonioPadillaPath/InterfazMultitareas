
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Antonio
 */
public class MatricesMxN extends javax.swing.JFrame {

    
    
    /**
     * Creates new form MatricesMxN
     */
    public MatricesMxN() {
        super("Matrices M x N");
        initComponents();
        
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jButton6 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        MatrizB = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        MatrizC = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        MatrizA = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Filas1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Filas2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Columnas1 = new javax.swing.JTextField();
        Columnas2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        Suma = new javax.swing.JButton();
        Resta = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        Producto = new javax.swing.JButton();
        Ayuda1 = new javax.swing.JButton();

        jButton6.setText("jButton6");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 102, 102));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 153, 153), 8, true));
        jPanel1.setForeground(new java.awt.Color(255, 0, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Ingrese la cantidad de filas y columnas de las matrices y seleccione la operación deseada:");

        MatrizB.setEditable(false);
        MatrizB.setColumns(20);
        MatrizB.setRows(5);
        jScrollPane3.setViewportView(MatrizB);

        MatrizC.setEditable(false);
        MatrizC.setColumns(20);
        MatrizC.setRows(5);
        jScrollPane4.setViewportView(MatrizC);

        MatrizA.setEditable(false);
        MatrizA.setColumns(20);
        MatrizA.setRows(5);
        jScrollPane5.setViewportView(MatrizA);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Matriz A   --->");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Matriz B   --->");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Filas:");

        Filas1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Filas1KeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Filas:");

        Filas2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Filas2ActionPerformed(evt);
            }
        });
        Filas2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Filas2KeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Columnas:");

        Columnas1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Columnas1KeyTyped(evt);
            }
        });

        Columnas2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Columnas2ActionPerformed(evt);
            }
        });
        Columnas2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Columnas2KeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Columnas:");

        Suma.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        Suma.setText("Suma");
        Suma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SumaActionPerformed(evt);
            }
        });

        Resta.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        Resta.setText("Resta");
        Resta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestaActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Matriz A");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Matriz B");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Matriz C");

        Producto.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        Producto.setText("Multiplicación");
        Producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductoActionPerformed(evt);
            }
        });

        Ayuda1.setBackground(new java.awt.Color(255, 255, 51));
        Ayuda1.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        Ayuda1.setText("?");
        Ayuda1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ayuda1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Ayuda1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Filas2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Filas1)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Columnas2))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Columnas1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jLabel8)
                                .addGap(177, 177, 177)
                                .addComponent(jLabel9)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Suma)
                                    .addComponent(Resta))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel10)
                                .addGap(58, 58, 58))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Producto)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Ayuda1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(Filas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Columnas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(Suma)
                            .addComponent(Producto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Filas2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(Columnas2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Resta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static int f1, f2, c1, c2;
    
    static double matrizA[][];
    static double matrizB[][];
    
    private void Columnas2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Columnas2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Columnas2ActionPerformed

    private void Filas2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Filas2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Filas2ActionPerformed

    private void Filas1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Filas1KeyTyped
        
        char fila1 = evt.getKeyChar();
        
        if(Character.isLetter(fila1))
        {
            getToolkit().beep();
            evt.consume();
            Suma.setEnabled(false);
        }
        
        else
        {
            Suma.setEnabled(true);
        }
        
    }//GEN-LAST:event_Filas1KeyTyped

    private void Columnas1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Columnas1KeyTyped
      
        char columna1 = evt.getKeyChar();
        
        if(Character.isLetter(columna1))
        {
            getToolkit().beep();
            evt.consume();
            Suma.setEnabled(false);
        }
        
        else
        {
            Suma.setEnabled(true);
        }
        
    }//GEN-LAST:event_Columnas1KeyTyped

    private void Filas2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Filas2KeyTyped
        
        char fila2 = evt.getKeyChar();
        
        if(Character.isLetter(fila2))
        {
            getToolkit().beep();
            evt.consume();
            Resta.setEnabled(false);
        }
        
        else
        {
            Resta.setEnabled(true);
        }
        
    }//GEN-LAST:event_Filas2KeyTyped

    private void Columnas2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Columnas2KeyTyped
        
        char columna2 = evt.getKeyChar();
        
        if(Character.isLetter(columna2))
        {
            getToolkit().beep();
            evt.consume();
            Resta.setEnabled(false);
        }
        
        else
        {
            Resta.setEnabled(true);
        }
        
    }//GEN-LAST:event_Columnas2KeyTyped

    private void SumaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SumaActionPerformed

try{        
        int i, j;
        
        MatrizA.setText("");
        MatrizB.setText("");
        MatrizC.setText("");
                
        f1 = Integer.parseInt(this.Filas1.getText());
        c1 = Integer.parseInt(this.Columnas1.getText());
                
        double matrizA[][] = new double[f1][c1];
        String matrizA1[][] = new String[f1][c1];
        
        
        f2 = Integer.parseInt(this.Filas2.getText());
        c2 = Integer.parseInt(this.Columnas2.getText());
                
        double matrizB[][] = new double[f2][c2];
        String matrizB1[][] = new String[f2][c2];
        
        double matrizC[][] = new double[f1][c1];
        
        
        if(c1 != c2 && f1 != f2)
        {
            JOptionPane.showMessageDialog(null, "La operación no puede llevarse a cabo debido a que la cantidad de filas y columnas de ambas matrices son diferentes", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        else if(c1 != c2 && f1 == f2)
        {
            JOptionPane.showMessageDialog(null, "La operación no puede llevarse a cabo debido a que la cantidad de columnas de ambas matrices es diferente", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        else if(f1 != f2 && c1 == c2)
        {
            JOptionPane.showMessageDialog(null, "La operación no puede llevarse a cabo debido a que la cantidad de filas de ambas matrices es diferente", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        else{
        JOptionPane.showMessageDialog(null, "Ingrese los valores de la Matriz A por entradas", "Matriz A", JOptionPane.INFORMATION_MESSAGE);
        
        for(i = 0; i < f1; i++)
        {
            for(j = 0; j < c1; j++)
            {
                matrizA1[i][j] = JOptionPane.showInputDialog(null, "Entrada " +i+ +j, "Matriz A", JOptionPane.QUESTION_MESSAGE);
            
                if(matrizA1[i][j].indexOf('.') != -1)
                {
                    matrizA[i][j] = Double.parseDouble(matrizA1[i][j]);
                }
            
                else if(matrizA1[i][j].indexOf('/') != -1)
                {
                    String arreglo1[]= matrizA1[i][j].split("/");
                    double fraccionA = Double.parseDouble(arreglo1[0]);
                    double fraccionB = Double.parseDouble(arreglo1[1]);
                    matrizA[i][j] = fraccionA / fraccionB;
                }
            
                else
                {
                    matrizA[i][j] = Double.parseDouble(matrizA1[i][j]);
                }
            }
        }
        
        JOptionPane.showMessageDialog(null, "Los valores de la Matriz A se muestran en el cuadro de texto correspondiente", "Matriz A", JOptionPane.INFORMATION_MESSAGE);
        
        for(i = 0; i < f1; i++)
        {
            for(j = 0; j < c1; j++)
            {
                MatrizA.append(String.valueOf("[" +matrizA[i][j]+ "]"));
            }
            MatrizA.append("\n");
        }
        
        
        
        
        
        JOptionPane.showMessageDialog(null, "Ingrese los valores de la Matriz B por entradas", "Matriz B", JOptionPane.INFORMATION_MESSAGE);
        
        for(i = 0; i < f2; i++)
        {
            for(j = 0; j < c2; j++)
            {
                matrizB1[i][j] = JOptionPane.showInputDialog(null, "Entrada " +i+ +j, "Matriz B", JOptionPane.QUESTION_MESSAGE);
            
                if(matrizB1[i][j].indexOf('.') != -1)
                {
                    matrizB[i][j] = Double.parseDouble(matrizB1[i][j]);
                }
            
                else if(matrizB1[i][j].indexOf('/') != -1)
                {
                    String arreglo1[]= matrizB1[i][j].split("/");
                    double fraccionA = Double.parseDouble(arreglo1[0]);
                    double fraccionB = Double.parseDouble(arreglo1[1]);
                    matrizB[i][j] = fraccionA / fraccionB;
                }
            
                else
                {
                    matrizB[i][j] = Double.parseDouble(matrizB1[i][j]);
                }
            }
        }
        
        JOptionPane.showMessageDialog(null, "Los valores de la Matriz B se muestran en el cuadro de texto correspondiente", "Matriz B", JOptionPane.INFORMATION_MESSAGE);
        
        for(i = 0; i < f2; i++)
        {
            for(j = 0; j < c2; j++)
            {
                MatrizB.append(String.valueOf("[" +matrizB[i][j]+ "]"));
            }
            MatrizB.append("\n");
        }
        
        for(i = 0; i < f2; i++)
        {
            for(j = 0; j < c2; j++)
                    {
                       
                        matrizC[i][j] = matrizA[i][j] + matrizB[i][j];
                        
                    }
        }
        
        JOptionPane.showMessageDialog(null, "EL resultado de la operación se muestra en la Matriz C", "Resultado", JOptionPane.INFORMATION_MESSAGE);
        
        for(i = 0; i < f2; i++)
        {
            for(j = 0; j < c2; j++)
            {
                MatrizC.append(String.valueOf("[" +matrizC[i][j]+ "]"));
            }
            MatrizC.append("\n");
        }
        
        }//Aquí termina el else
        
        
}catch (Exception e){JOptionPane.showMessageDialog(null, "Introduzca el tipo de dato solicitado", "Error", JOptionPane.ERROR_MESSAGE);
        
    }                                                

   // private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
       /* int i, j;
        
        for(i = 0; i < f2; i++)
        {
            for(j = 0; j < c2; j++)
            {
                MatrizC.append(String.valueOf("[" +matrizB[i][j]+ "]"));
            }
            MatrizC.append("\n");
        }
        */
    }//GEN-LAST:event_SumaActionPerformed

    private void RestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestaActionPerformed
        
        try{
        
        int i, j;
        
        MatrizA.setText("");
        MatrizB.setText("");
        MatrizC.setText("");
                
        f1 = Integer.parseInt(this.Filas1.getText());
        c1 = Integer.parseInt(this.Columnas1.getText());
                
        double matrizA[][] = new double[f1][c1];
        String matrizA1[][] = new String[f1][c1];
        
        
        f2 = Integer.parseInt(this.Filas2.getText());
        c2 = Integer.parseInt(this.Columnas2.getText());
                
        double matrizB[][] = new double[f2][c2];
        String matrizB1[][] = new String[f2][c2];
        
        double matrizC[][] = new double[f1][c1];
        
        
        if(c1 != c2 && f1 != f2)
        {
            JOptionPane.showMessageDialog(null, "La operación no puede llevarse a cabo debido a que la cantidad de filas y columnas de ambas matrices son diferentes", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        else if(c1 != c2 && f1 == f2)
        {
            JOptionPane.showMessageDialog(null, "La operación no puede llevarse a cabo debido a que la cantidad de columnas de ambas matrices es diferente", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        else if(f1 != f2 && c1 == c2)
        {
            JOptionPane.showMessageDialog(null, "La operación no puede llevarse a cabo debido a que la cantidad de filas de ambas matrices es diferente", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        else{
            JOptionPane.showMessageDialog(null, "Ingrese los valores de la Matriz A por entradas", "Matriz A", JOptionPane.INFORMATION_MESSAGE);
        
            for(i = 0; i < f1; i++)
            {
                for(j = 0; j < c1; j++)
                {
                    matrizA1[i][j] = JOptionPane.showInputDialog(null, "Entrada " +i+ +j, "Matriz A", JOptionPane.QUESTION_MESSAGE);
            
                    if(matrizA1[i][j].indexOf('.') != -1)
                    {
                        matrizA[i][j] = Double.parseDouble(matrizA1[i][j]);
                    }
            
                    else if(matrizA1[i][j].indexOf('/') != -1)
                    {
                        String arreglo1[]= matrizA1[i][j].split("/");
                        double fraccionA = Double.parseDouble(arreglo1[0]);
                        double fraccionB = Double.parseDouble(arreglo1[1]);
                        matrizA[i][j] = fraccionA / fraccionB;
                    }
            
                    else
                    {
                        matrizA[i][j] = Double.parseDouble(matrizA1[i][j]);
                    }
                }
            }
        
        JOptionPane.showMessageDialog(null, "Los valores de la Matriz A se muestran en el cuadro de texto correspondiente", "Matriz A", JOptionPane.INFORMATION_MESSAGE);
        
            for(i = 0; i < f1; i++)
            {
                for(j = 0; j < c1; j++)
                {
                    MatrizA.append(String.valueOf("[" +matrizA[i][j]+ "]"));
                }
                MatrizA.append("\n");
            }
        
        
        
        
        
        JOptionPane.showMessageDialog(null, "Ingrese los valores de la Matriz B por entradas", "Matriz B", JOptionPane.INFORMATION_MESSAGE);
        
            for(i = 0; i < f2; i++)
            {
                for(j = 0; j < c2; j++)
                {
                    matrizB1[i][j] = JOptionPane.showInputDialog(null, "Entrada " +i+ +j, "Matriz B", JOptionPane.QUESTION_MESSAGE);
            
                    if(matrizB1[i][j].indexOf('.') != -1)
                    {
                        matrizB[i][j] = Double.parseDouble(matrizB1[i][j]);
                    }
            
                    else if(matrizB1[i][j].indexOf('/') != -1)
                    {
                        String arreglo1[]= matrizB1[i][j].split("/");
                        double fraccionA = Double.parseDouble(arreglo1[0]);
                        double fraccionB = Double.parseDouble(arreglo1[1]);
                        matrizB[i][j] = fraccionA / fraccionB;
                    }
            
                    else
                    {
                        matrizB[i][j] = Double.parseDouble(matrizB1[i][j]);
                    }
                }
            }
        
        JOptionPane.showMessageDialog(null, "Los valores de la Matriz B se muestran en el cuadro de texto correspondiente", "Matriz B", JOptionPane.INFORMATION_MESSAGE);
        
            for(i = 0; i < f2; i++)
            {
                for(j = 0; j < c2; j++)
                {
                    MatrizB.append(String.valueOf("[" +matrizB[i][j]+ "]"));
                }
                MatrizB.append("\n");
            }
        
            for(i = 0; i < f2; i++)
            {
                for(j = 0; j < c2; j++)
                    {
                       
                        matrizC[i][j] = matrizA[i][j] - matrizB[i][j];
                        
                    }
            }
        
        JOptionPane.showMessageDialog(null, "EL resultado de la operación se muestra en la Matriz C", "Resultado", JOptionPane.INFORMATION_MESSAGE);
        
            for(i = 0; i < f2; i++)
            {
                for(j = 0; j < c2; j++)
                {
                    MatrizC.append(String.valueOf("[" +matrizC[i][j]+ "]"));
                }
                MatrizC.append("\n");
            }
        
        }//Aquí termina el else
        
        }catch (Exception e){JOptionPane.showMessageDialog(null, "Introduzca el tipo de dato solicitado", "Error", JOptionPane.ERROR_MESSAGE);}
    
        
    }//GEN-LAST:event_RestaActionPerformed

    private void ProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductoActionPerformed
        
        try{
        
        int i, j, k;
        
        MatrizA.setText("");
        MatrizB.setText("");
        MatrizC.setText("");
                
        f1 = Integer.parseInt(this.Filas1.getText());
        c1 = Integer.parseInt(this.Columnas1.getText());
                
        double matrizA[][] = new double[f1][c1];
        String matrizA1[][] = new String[f1][c1];
        
        
        f2 = Integer.parseInt(this.Filas2.getText());
        c2 = Integer.parseInt(this.Columnas2.getText());
                
        double matrizB[][] = new double[f2][c2];
        String matrizB1[][] = new String[f2][c2];
        
        
        if(c1 != f2)
        {
            JOptionPane.showMessageDialog(null, "La cantidad de columnas de la Matriz A debe ser igual a la cantidad de filas de la Matriz B", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        else{
            
            double matrizC[][] = new double[f1][c2];
            
        JOptionPane.showMessageDialog(null, "Ingrese los valores de la Matriz A por entradas", "Matriz A", JOptionPane.INFORMATION_MESSAGE);
        
        for(i = 0; i < f1; i++)
        {
            for(j = 0; j < c1; j++)
            {
                matrizA1[i][j] = JOptionPane.showInputDialog(null, "Entrada " +i+ +j, "Matriz A", JOptionPane.QUESTION_MESSAGE);
            
                if(matrizA1[i][j].indexOf('.') != -1)
                {
                    matrizA[i][j] = Double.parseDouble(matrizA1[i][j]);
                }
            
                else if(matrizA1[i][j].indexOf('/') != -1)
                {
                    String arreglo1[]= matrizA1[i][j].split("/");
                    double fraccionA = Double.parseDouble(arreglo1[0]);
                    double fraccionB = Double.parseDouble(arreglo1[1]);
                    matrizA[i][j] = fraccionA / fraccionB;
                }
            
                else
                {
                    matrizA[i][j] = Double.parseDouble(matrizA1[i][j]);
                }
            }
        }
        
        JOptionPane.showMessageDialog(null, "Los valores de la Matriz A se muestran en el cuadro de texto correspondiente", "Matriz A", JOptionPane.INFORMATION_MESSAGE);
        
        for(i = 0; i < f1; i++)
        {
            for(j = 0; j < c1; j++)
            {
                MatrizA.append(String.valueOf("[" +matrizA[i][j]+ "]"));
            }
            MatrizA.append("\n");
        }
        
        
        
        
        
        JOptionPane.showMessageDialog(null, "Ingrese los valores de la Matriz B por entradas", "Matriz B", JOptionPane.INFORMATION_MESSAGE);
        
        for(i = 0; i < f2; i++)
        {
            for(j = 0; j < c2; j++)
            {
                matrizB1[i][j] = JOptionPane.showInputDialog(null, "Entrada " +i+ +j, "Matriz B", JOptionPane.QUESTION_MESSAGE);
            
                if(matrizB1[i][j].indexOf('.') != -1)
                {
                    matrizB[i][j] = Double.parseDouble(matrizB1[i][j]);
                }
            
                else if(matrizB1[i][j].indexOf('/') != -1)
                {
                    String arreglo1[]= matrizB1[i][j].split("/");
                    double fraccionA = Double.parseDouble(arreglo1[0]);
                    double fraccionB = Double.parseDouble(arreglo1[1]);
                    matrizB[i][j] = fraccionA / fraccionB;
                }
            
                else
                {
                    matrizB[i][j] = Double.parseDouble(matrizB1[i][j]);
                }
            }
        }
        
        JOptionPane.showMessageDialog(null, "Los valores de la Matriz B se muestran en el cuadro de texto correspondiente", "Matriz B", JOptionPane.INFORMATION_MESSAGE);
        
        for(i = 0; i < f2; i++)
        {
            for(j = 0; j < c2; j++)
            {
                MatrizB.append(String.valueOf("[" +matrizB[i][j]+ "]"));
            }
            MatrizB.append("\n");
        }
        
        for(i = 0; i < f1; i++)
        {
            for(j = 0; j < c2; j++)
                    {
                       
                        for(k = 0; k < f2; k++)
                        {
                            matrizC[i][j] += matrizA[i][k] * matrizB[k][j];
                        }
                        
                    }
        }
        
        JOptionPane.showMessageDialog(null, "EL resultado de la operación se muestra en la Matriz C", "Resultado", JOptionPane.INFORMATION_MESSAGE);
        
        for(i = 0; i < f1; i++)
        {
            for(j = 0; j < c2; j++)
            {
                MatrizC.append(String.valueOf("[" +matrizC[i][j]+ "]"));
            }
            MatrizC.append("\n");
        }
        
        }//Aquí termina el else
        
        }catch (Exception e){JOptionPane.showMessageDialog(null, "Introduzca el tipo de dato solicitado", "Error", JOptionPane.ERROR_MESSAGE);
  
        }
    }//GEN-LAST:event_ProductoActionPerformed

    private void Ayuda1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ayuda1ActionPerformed
        
        AyudaMXN mxn = new AyudaMXN();
        mxn.setVisible(true);
        
    }//GEN-LAST:event_Ayuda1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatricesMxN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatricesMxN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatricesMxN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatricesMxN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatricesMxN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Ayuda1;
    private javax.swing.JTextField Columnas1;
    private javax.swing.JTextField Columnas2;
    private javax.swing.JTextField Filas1;
    private javax.swing.JTextField Filas2;
    private javax.swing.JTextArea MatrizA;
    private javax.swing.JTextArea MatrizB;
    private javax.swing.JTextArea MatrizC;
    private javax.swing.JButton Producto;
    private javax.swing.JButton Resta;
    private javax.swing.JButton Suma;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    // End of variables declaration//GEN-END:variables
}
