
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Antonio
 */
public class GaussJordan extends javax.swing.JFrame {

    /**
     * Creates new form GaussJordan
     */
    public GaussJordan() {
        super("Método Gauss - Jordan");
        initComponents();
        
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        GS = new javax.swing.JButton();
        N = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        Procedimiento = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        Borrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102), 8));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Ingrese el tamaño de la matriz cuadrada: ");

        jButton1.setBackground(new java.awt.Color(255, 255, 51));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jButton1.setText("?");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        GS.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        GS.setText("Ingresar Valores y Realizar el Método Gauss - Jordan");
        GS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSActionPerformed(evt);
            }
        });

        N.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NKeyTyped(evt);
            }
        });

        Procedimiento.setEditable(false);
        Procedimiento.setColumns(20);
        Procedimiento.setRows(5);
        jScrollPane2.setViewportView(Procedimiento);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel3.setText("Procedimiento Gauss-Jordan:");

        Borrar.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        Borrar.setText("Borrar campos de las matrices");
        Borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(N, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(GS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                        .addComponent(Borrar)
                        .addGap(80, 80, 80))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(N, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GS)
                    .addComponent(Borrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        AyudaGJ gj = new AyudaGJ();
        gj.setVisible(true);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void NKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NKeyTyped
        
        char N = evt.getKeyChar();
        
        if(Character.isLetter(N))
        {
            getToolkit().beep();
            evt.consume();
            GS.setEnabled(false);
        }
        
        else
        {
            GS.setEnabled(true);
        }
        
    }//GEN-LAST:event_NKeyTyped

    private void GSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GSActionPerformed
        
        
        
        int i, j, k, l, m;
        double pivote1, pivote2, pivote3;
        int n;
        
        n = Integer.parseInt(this.N.getText());
        
        Procedimiento.setText("");
        
        double matriz[][] = new double [n][n * 2];
        String matriz1[][] = new String [n][n];
        
        double matriz2[][] = new double [n][n * 2];
        
        double matrizComprobacion [][] = new double [n][n];
        double matrizOriginal [][] = new double [n][n];
        
        
        JOptionPane.showMessageDialog(null, "Ingrese los valores en las entradas correspondientes", "Gauss-Jordan", JOptionPane.PLAIN_MESSAGE);
        
        for(i = 0; i < n; i++)
        {
            for(j = 0; j < n; j++)
            {
                matriz1[i][j] = JOptionPane.showInputDialog(null, "Entrada " +i+ +j, "Gauss - Jordan", JOptionPane.QUESTION_MESSAGE);
            
                if(matriz1[i][j].indexOf('.') != -1)
                {
                    matriz[i][j] = Double.parseDouble(matriz1[i][j]);
                    
                }
            
                else if(matriz1[i][j].indexOf('/') != -1)
                {
                    String arreglo1[]= matriz1[i][j].split("/");
                    double fraccionA = Double.parseDouble(arreglo1[0]);
                    double fraccionB = Double.parseDouble(arreglo1[1]);
                    matriz[i][j] = fraccionA / fraccionB;
                    
                    
                }
            
                else
                {
                    matriz[i][j] = Double.parseDouble(matriz1[i][j]);
                    
                    
                }
            }
        }
        
        //Aquí vuelven 0 todos los valores de la matriz extendida
        for(i = 0; i < n; i++)
        {
            for(j = n; j < (n * 2); j++)
            {
                matriz[i][j] = 0;
            }
        }
        
        //Aquí se vuelven 1 todos los valores de la diagonal de la matriz extendida
        for(i = 0; i < n; i++)
        {
            for(j = n; j < (n * 2); j++)
            {
                matriz[i][n + i] = 1;
            }
        }
        
        for(i = 0; i < n; i++)
        {
            for(j = 0; j < n; j++)
                    {
                       
                        matrizOriginal[i][j] = matriz[i][j];
                        
                    }
        }
        
        
        
        JOptionPane.showMessageDialog(null, "Los valores de la Matriz se muestran en el campo de texto", "Gauss - Jordan", JOptionPane.INFORMATION_MESSAGE);
        
        for(i = 0; i < n; i++)
        {
            for(j = 0; j < (n * 2); j++)
            {
                if(j == n)
                {
                    Procedimiento.append(String.valueOf(" |||| [" +matriz[i][j]+ "]"));
                }
                
                else
                {
                    Procedimiento.append(String.valueOf("[" +matriz[i][j]+ "]"));
                }
            }
            Procedimiento.append("\n");
        }
        
        Procedimiento.append("\n");
        Procedimiento.append("\n");
        
        
        JOptionPane.showMessageDialog(null, "Los valores de la Matriz Inversa se muestran en el campo correspondiente", "Gauss - Jordan", JOptionPane.INFORMATION_MESSAGE);

        
        
        //Aquí comienza el procedimiento
        JOptionPane.showMessageDialog(null, "Inicia el método Gauss - Jordan", "Gauss - Jordan", JOptionPane.PLAIN_MESSAGE);
        
        
        //while(matrizSombra != matrizInversa)
        //{
            for(i = 0; i < (n - 1); i++)
            {
                
                for(j = n; j > (i + 1); j--)
                {
                    
                    if(i > 0)
                    {
                        pivote3 = matriz[i][i];
                    
                        //División para que la columna quede en 1
                        for(k = 0; k < (n * 2);k++)
                        {                       
                            matriz[i][k] = matriz[i][k] / pivote3;                          
                        }
                
                        for(l = 0; l < n; l++)
                        {
                            //for para imprimir por pasos la matriz
                            for(m = 0; m < (n * 2); m++)
                            {
                                if(m == n)
                                {
                                    Procedimiento.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                }
                
                                else
                                {
                                    Procedimiento.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                }
                            }
                            Procedimiento.append("\n");
                        }
        
                        Procedimiento.append("\n");
                        Procedimiento.append("\n");
                    }
                    
                    
                    
                    pivote1 = matriz[i][i];
                    pivote2 = matriz[j - 1][i];
                    
                    if((matriz[j - 1][i] > 0 && matriz[i][i] > 0) || ((matriz[j - 1][i] < 0 && matriz[i][i] < 0)))
                    {
                        for(k = 0; k < (n * 2);k++)
                        {                       
                            matriz[j - 1][k] = (matriz[j - 1][k] * pivote1) + (matriz[i][k]) * ((-1) * pivote2);                          
                        }
                        
                        for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < (n * 2); m++)
                                {
                                    if(m == n)
                                    {
                                        Procedimiento.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Procedimiento.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Procedimiento.append("\n");
                            }
        
                            Procedimiento.append("\n");
                            Procedimiento.append("\n");
                        
                    }
                    
                    else if((matriz[j - 1][i] > 0 && matriz[i][i] < 0) || ((matriz[j - 1][i] < 0 && matriz[i][i] > 0)) || matriz[i][i] == 0)
                        {
                        
                            for(k = 0; k < (n * 2);k++)
                        {                       
                            matriz[j - 1][k] = (matriz[j - 1][k] * pivote1) - (matriz[i][k] * pivote2);                          
                        }
                        
                        for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < (n * 2); m++)
                                {
                                    if(m == n)
                                    {
                                        Procedimiento.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Procedimiento.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Procedimiento.append("\n");
                            }
        
                            Procedimiento.append("\n");
                            Procedimiento.append("\n");
                    }
                    
                    else
                    {
                        for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < (n * 2); m++)
                                {
                                    if(m == n)
                                    {
                                        Procedimiento.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Procedimiento.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Procedimiento.append("\n");
                            }
        
                            Procedimiento.append("\n");
                            Procedimiento.append("\n");
                    } 
                    
           
                }
                

            }
            
            pivote3 = matriz[n - 1][n - 1];
            
            for(i = (n - 1); i <= (n - 1); i++)
            {
                for(j = 0; j < (n * 2); j++)
                {
                    matriz[i][j] = matriz[i][j] / pivote3;
                }
            }
            
            for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < (n * 2); m++)
                                {
                                    if(m == n)
                                    {
                                        Procedimiento.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Procedimiento.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Procedimiento.append("\n");
                            }
        
                            Procedimiento.append("\n");
                            Procedimiento.append("\n");
                            
                            //pivote3 = matriz[0][0];
            
            /*for(i = 0; i <= 1; i++)
            {
                for(j = 0; j < (n * 2); j++)
                {
                    matriz[i][j] = matriz[i][j] / pivote3;
                }
            }
            
            for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < (n * 2); m++)
                                {
                                    if(m == n)
                                    {
                                        Procedimiento.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Procedimiento.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Procedimiento.append("\n");
                            }
        
                            Procedimiento.append("\n");
                            Procedimiento.append("\n"); */
                            
                            
            
            
  //------------------------------------------------------------------------------          
            //Procedimiento para invertir matriz
            for (i = 0; i < n; i++)
            {
                for(j = 0; j < (n * 2); j++)
                {
                    matriz2[i][j] = matriz[(n - 1) - i][((n * 2) - 1) - j];
                }
            }
            
                            
    //-------------------------------------------------------------------
    
    
    for(i = 0; i < (n - 1); i++)
            {
                
                for(j = n; j > (i + 1); j--)
                {
                    
                    if(i > 0)
                {
                    pivote3 = matriz2[i][i + n];
                    
                    //División para que la columna quede en 1
                for(k = 0; k < (n * 2);k++)
                {                       
                    matriz2[i][k] = matriz2[i][k] / pivote3;                          
                }
                
                
                for (l = 0; l < n; l++)
            {
                for(m = 0; m < (n * 2); m++)
                {
                    matriz[l][m] = matriz2[(n - 1) - l][((n * 2) - 1) - m];
                }
            }
                
                
                for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < (n * 2); m++)
                                {
                                    if(m == n)
                                    {
                                        Procedimiento.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Procedimiento.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Procedimiento.append("\n");
                            }
        
                            Procedimiento.append("\n");
                            Procedimiento.append("\n");
                }
                    
                    
                    
                    pivote1 = matriz2[i][i + n];
                    pivote2 = matriz2[j - 1][i + n];
                    
                    if((matriz2[j - 1][i + n] > 0 && matriz2[i][i + n] > 0) || ((matriz2[j - 1][i + n] < 0 && matriz2[i][i + n] < 0)))
                    {
                        for(k = 0; k < (n * 2);k++)
                        {                       
                            matriz2[j - 1][k] = (matriz2[j - 1][k] * pivote1) + (matriz2[i][k]) * ((-1) * pivote2);                          
                        }
                        
                        for (l = 0; l < n; l++)
            {
                for(m = 0; m < (n * 2); m++)
                {
                    matriz[l][m] = matriz2[(n - 1) - l][((n * 2) - 1) - m];
                }
            }
                        
                        
                        for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < (n * 2); m++)
                                {
                                    if(m == n)
                                    {
                                        Procedimiento.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Procedimiento.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Procedimiento.append("\n");
                            }
        
                            Procedimiento.append("\n");
                            Procedimiento.append("\n");
                        
                    }
                    
                    else if((matriz2[j - 1][i + n] > 0 && matriz2[i][i + n] < 0) || ((matriz2[j - 1][i + n] < 0 && matriz2[i][i + n] > 0)) || matriz2[i][i] == 0)
                        {
                        
                            for(k = 0; k < (n * 2);k++)
                        {                       
                            matriz2[j - 1][k] = (matriz2[j - 1][k] * pivote1) - (matriz2[i][k] * pivote2);                          
                        }
                            
                            for (l = 0; l < n; l++)
            {
                for(m = 0; m < (n * 2); m++)
                {
                    matriz[l][m] = matriz2[(n - 1) - l][((n * 2) - 1) - m];
                }
            }
                        
                        for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < (n * 2); m++)
                                {
                                    if(m == n)
                                    {
                                        Procedimiento.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Procedimiento.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Procedimiento.append("\n");
                            }
        
                            Procedimiento.append("\n");
                            Procedimiento.append("\n");
                    }
                    
                    else
                    {
                        for (l = 0; l < n; l++)
            {
                for(m = 0; m < (n * 2); m++)
                {
                    matriz[l][m] = matriz2[(n - 1) - l][((n * 2) - 1) - m];
                }
            }
                        
                        
                        for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < (n * 2); m++)
                                {
                                    if(m == n)
                                    {
                                        Procedimiento.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Procedimiento.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Procedimiento.append("\n");
                            }
        
                            Procedimiento.append("\n");
                            Procedimiento.append("\n");
                    } 
                    
           
                }
                

            }
            
            pivote3 = matriz2[n - 1][(n * 2) - 1];
            
            for(i = (n - 1); i <= (n - 1); i++)
            {
                for(j = 0; j < (n * 2); j++)
                {
                    matriz2[i][j] = matriz2[i][j] / pivote3;
                }
            }
            
            for (l = 0; l < n; l++)
            {
                for(m = 0; m < (n * 2); m++)
                {
                    matriz[l][m] = matriz2[(n - 1) - l][((n * 2) - 1) - m];
                }
            }
            
            for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < (n * 2); m++)
                                {
                                    if(m == n)
                                    {
                                        Procedimiento.append(String.valueOf(" |||| [" +matriz[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Procedimiento.append(String.valueOf("[" +matriz[l][m]+ "]"));
                                    }
                                }
                                Procedimiento.append("\n");
                            }
        
                            Procedimiento.append("\n");
                            Procedimiento.append("\n");
                            
                           /*pivote3 = matriz2[0][0];
            
            for(i = 0; i <= 1; i++)
            {
                for(j = 0; j < (n * 2); j++)
                {
                    matriz2[i][j] = matriz2[i][j] / pivote3;
                }
            }
            
            for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < (n * 2); m++)
                                {
                                    if(m == n)
                                    {
                                        Procedimiento.append(String.valueOf(" |||| [" +matriz2[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Procedimiento.append(String.valueOf("[" +matriz2[l][m]+ "]"));
                                    }
                                }
                                Procedimiento.append("\n");
                            }
        
                            Procedimiento.append("\n");
                            Procedimiento.append("\n"); */
            
        //}
        
        
//        JOptionPane.showInternalMessageDialog(null, "Ahora se realizará la comprobación multiplicando la matriz Inversa por la Original", "Comprobación", JOptionPane.INFORMATION_MESSAGE);
        
        /*for(i = 0; i < n; i++)
        {
            for(j = 0; j < n; j++)
                    {
                        for(k = 0; k < n; k++)
                        {
                            matrizComprobacion[i][j] += matriz[i][k] * matrizOriginal[k][j];
                        }
                    }
        }
        
        for(l = 0; l < n; l++)
                            {
                                //for para imprimir por pasos la matriz
                                for(m = 0; m < n; m++)
                                {
                                    if(m == n)
                                    {
                                        Procedimiento.append(String.valueOf(" |||| [" +matrizComprobacion[l][m]+ "]"));
                                    }
                
                                    else
                                    {
                                        Procedimiento.append(String.valueOf("[" +matrizComprobacion[l][m]+ "]"));
                                    }
                                }
                                Procedimiento.append("\n");
                            }
        
                            Procedimiento.append("\n");
                            Procedimiento.append("\n");*/
        
        
    }//GEN-LAST:event_GSActionPerformed

    private void BorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarActionPerformed
        
        Procedimiento.setText("");
        N.setText("");
        
    }//GEN-LAST:event_BorrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GaussJordan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GaussJordan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GaussJordan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GaussJordan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GaussJordan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Borrar;
    private javax.swing.JButton GS;
    private javax.swing.JTextField N;
    private javax.swing.JTextArea Procedimiento;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
